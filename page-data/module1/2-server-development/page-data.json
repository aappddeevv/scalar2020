{"componentChunkName":"component---src-templates-docs-js","path":"/module1/2-server-development","result":{"data":{"site":{"siteMetadata":{"title":"Scalar 2020 Fullstack Workshop","docsLocation":"https://github.com/hasura/gatsby-gitbook-boilerplate/tree/master/content"}},"mdx":{"fields":{"id":"8cdae3fa-67cf-5da6-a4ef-b6fa25bd451a","title":"Server Development","slug":"/module1/2-server-development"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Server Development\",\n  \"metaTitle\": \"Server Development\",\n  \"metaDescription\": \"Server Development\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Let's use node express to develop the server. The server is based on node and javascript and is quite popular and has many add ons. Its not the fastest server but it is well proven and in a full stack world you may may not have the luxury of choosing all the parts of the technology stack that you want. The backend will have:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"node.js: Runtime environment.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"express: HTTP server framework.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"apollo graphql: The front end will be served by graphql.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"scala.js: Our \\\"response\\\" code will use scala.js to run\\nmost of the effects.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"sqllite: Backend database\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"connectors: Connectors to \\\"downstream\\\" services such as bert-as-service.\")), mdx(\"h1\", null, \"Development Setup\"), mdx(\"p\", null, \"We will use containers to develop the backend. We might use docker for a few different reasons including:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The dev dependencies do not match our local machine and\\nwe do not want to change our local machine.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Prod will run in a container. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Repeatable dev process.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The main project that we are integrated into uses containers\\nand so must you.\")), mdx(\"p\", null, \"To be completely independent of any \\\"host\\\" environment we should run your editor in a container as well but for our workshop we will assume that everyone has an editor installed along with a container service like docker. However, we are not assuming that we have node installed. We must start with a basic container and build up to the layers.\"), mdx(\"p\", null, \"You can use any editor we will not assume that we are using a specific editor, such as visual studio code, which makes container development easier. We will assume that you have the simplest editor, such as vi, available.\"), mdx(\"p\", null, \"I will use visual studio code since that's a popular choice but I often use emacs as well. It's up to you.\"), mdx(\"p\", null, \"One note, while sbt, which we will use for scala development, is good at reproducing builds, we may still want to isolate out the jdk dependency. We may be using sdk on the host for jdk management but let's assume we want to lock down the jdk dependency as well.\"), mdx(\"h1\", null, \"Container Approach\"), mdx(\"p\", null, \"There are a few different ways to create a container, some of which lead to very slow development patterns. There are also different ways to use a container environment.\"), mdx(\"p\", null, \"A good approach is to use docker and isolate large dependencies in their own immutable layer so that the layer does not need to be rebuilt when you rebuild your container for whatever reason.\"), mdx(\"p\", null, \"Here's our approach to using a container for development work:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Host\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Editor\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Development files\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"git\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"browser e.g. chrome/firefox/brave\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"filesystem content shared with containers:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Build artifacts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"npm modules (.e.g. node_modules)\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Container\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"node base runtime\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"jdk\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"sbt\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"scalac\")))), mdx(\"p\", null, \"If your IDE/editor running on the Host supports debugging, we would\\nwant to connect to the processes running in the container.\"), mdx(\"p\", null, \"Notice that in this case, we are using a shared filesystem on the\\nhost and any temporary development files will also be directly\\nvisible on the even though they are generated from processes\\nrunning in the container. Obviously, for production use,\\nwe would use a different container approach and all of the dependencies\\nwould need to be in the container. You may choose this approach\\nif your prod environment must be minimized and you do not want\\nto install npm \\\"dev\\\" dependencies into the container because\\nthey would take up additional space, etc. Most tutorials you see on\\nusing containers and node together will install everything\\nregardless of prod or dev usage.\"), mdx(\"p\", null, \"Changes made in a container are persisted (if you do \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"not\"), \" use\\n--rm to run it) and you can start a stopped container to see all\\nof the changes. However, in practice for development\\nI found that I typically forget to push changes to my repo or save\\nthem.\"), mdx(\"h1\", null, \"Explore Dev Containers\"), mdx(\"p\", null, \"Lets install a dev image and create a container. You can review\\nimages that you like at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hub.docker.com\"\n  }), \"https://hub.docker.com\"), \" and find a base\\nimage that you like. You may also find an image that has everything\\nyou want in it. However, unless you are running podman with rootless\\npods, be aware that if you run your docker images with elevated\\nprivileges, a container may be malicious and harm your system.\"), mdx(\"p\", null, \"You can look at and compare several images:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ubuntu:latest\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"centos:latest\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"fedora:latest\")), mdx(\"p\", null, \"You can pull the image then start it or pull it independently. Here's the pull.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"docker pull ubuntu:latest\\n\")), mdx(\"p\", null, \"If you just run it, it will pull the image if it is not local already. Most of the images include a shell that runs by default:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"docker run -it ubuntu:latest\\n\")), mdx(\"p\", null, \"If an images did not set a default command (CMD) to run when the container\\nstarts you can use:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"docker run -it ubuntu:latest sh\\n\")), mdx(\"p\", null, \"You can also start a container with some software already installed. Most\\nmajor software platforms have pre-built images for you to try out:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"# choose any version to try it out e.g. node:alpine or node:latest \\ndocker run -it node:alpine\\n\")), mdx(\"p\", null, \"This drops you into a node shell. To run and start a shell:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"docker run -it node:alpine sh\\n\")), mdx(\"p\", null, \"You can see all the various available at the hub registry \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hub.docker.com/_/node\"\n  }), \"https://hub.docker.com/_/node\"), \"\\nand browse the tags. You will see slim version, alpine versions and others mosty with different bases. The hub also shows you the Dockerfile so you can copy parts of it into a new Dockerfile. Some of the installs can be complex and there are a few tricks to building the images efficiently.\"), mdx(\"p\", null, \"If you search for both node and java, you may find \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"timbru31/java-node:latest\"), \" which has both parts already installed. Search for openjdk, oraclejdk and others to see what's available.\"), mdx(\"p\", null, \"If you are building a development image, you may have a preference\\nfor the base that is used to build the platform level image as the base may\\ncause restrictions to occur. For example, the alpine images do not use glibc\\nso anything requiring glibc may have difficulty.\"), mdx(\"h1\", null, \"Create Dev Container Interactively\"), mdx(\"p\", null, \"We will use a base node container then add java to it. You can build a dev image 2 ways:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Interactively: Start a container and then issues the commands interactively.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Once you are finished, \\\"docker commit\\\" the container to save your changes as an image.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Stop the container. Never delete it. Restart it when you want to do more work.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a recipe via a Dockerfile.\")), mdx(\"p\", null, \"I always create it interactively and step by step write down instructions in a Dockerfile once I have it right.\"), mdx(\"p\", null, \"Here's the interactive version. After the first command, the commands are executed in the container shell.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ docker run -it node:alpine sh\\n\\n# apk add --no-cache openjdk11 curl ncurses\\n\\n# curl -Lo coursier https://git.io/coursier-cli &&\\n    chmod +x coursier && mv coursier /usr/local/bin/cs\\n\\n# export PATH=/root/.local/share/coursier/bin:$PATH\\n\\n# cs install ammonite sbt-launcher mill\\n\")), mdx(\"p\", null, \"Once created we stop and star the container (don't delete it!) and all the software stays installed. We could also run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker commit <containerid>\"), \" to commit. You can \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ctrl-P Ctrl-Q\"), \" out of the shell to exit the container. If its still running you can always start a shell in the running container via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker exec -it <containerid> sh\"), \".\"), mdx(\"h1\", null, \"Create Dev Container Using Recipe\"), mdx(\"p\", null, \"Create a file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dockerfile\"), \" which is based on YAML syntax:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-dockerfile\"\n  }), \"# name the base layer so we can use this as a base in a multi-stage build later\\nFROM node:alpine as builder\\n\\nRUN apk add --no-cache openjdk11 curl ncurses\\n\\nRUN curl -Lo coursier https://git.io/coursier-cli && \\\\\\n    chmod +x coursier && \\\\\\n    mv coursier /usr/local/bin/cs && \\\\\\n    cs install ammonite sbt-launcher mill && \\\\\\n    echo \\\"export PATH=/root/.local/share/coursier/bin:$PATH\\\" >> /etc/profile \\n\\nENV ENV=\\\"/etc/profile\\\"\\n\\nCMD [\\\"/bin/sh\\\"]\\n\")), mdx(\"p\", null, \"Run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker build -t dev -f Dockerfile\"), \" to build the image. Your image is listed as \\\"dev\\\" from running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker images\"), \". The use of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"as builder\"), \" means that this layer can be referened by other layers if we extend Dockerfile. That will be important in later steps when a multi-stage build is more helpful.\"), mdx(\"h1\", null, \"Try It\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"cd modules/module1/10_containers\\n\\ndocker build -t dev -f Dockerfile\\n\\ndocker run -it --rm dev:latest\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#development-setup","title":"Development Setup"},{"url":"#container-approach","title":"Container Approach"},{"url":"#explore-dev-containers","title":"Explore Dev Containers"},{"url":"#create-dev-container-interactively","title":"Create Dev Container Interactively"},{"url":"#create-dev-container-using-recipe","title":"Create Dev Container Using Recipe"},{"url":"#try-it","title":"Try It"}]},"parent":{"relativePath":"module1/2-server-development.md"},"frontmatter":{"metaTitle":"Server Development","metaDescription":"Server Development"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/","title":"Scala 2020 Workshop"}}},{"node":{"fields":{"slug":"/codeblock","title":"Syntax Highlighting"}}},{"node":{"fields":{"slug":"/module1","title":"Module 1"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/module2","title":"Module 2"}}},{"node":{"fields":{"slug":"/codeblock/1-index","title":"Sub Page"}}},{"node":{"fields":{"slug":"/codeblock/2-test","title":"Sub Page Dupe"}}},{"node":{"fields":{"slug":"/introduction/2-search","title":"2 Search"}}},{"node":{"fields":{"slug":"/introduction/1-nlp","title":"NLP"}}},{"node":{"fields":{"slug":"/introduction/3-setup","title":"Setup"}}},{"node":{"fields":{"slug":"/module1/1-virtual-environments","title":"Virtual Environments"}}},{"node":{"fields":{"slug":"/module1/2-server-development","title":"Server Development"}}},{"node":{"fields":{"slug":"/module1/3-data","title":"Data"}}},{"node":{"fields":{"slug":"/module2/0-generalidea","title":"General Idea"}}},{"node":{"fields":{"slug":"/module2/1-training","title":"Training"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"8cdae3fa-67cf-5da6-a4ef-b6fa25bd451a"}}}